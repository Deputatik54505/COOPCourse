Index: Controller/src/main/java/org/example/entities/product/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/src/main/java/org/example/entities/product/Product.java b/Controller/src/main/java/org/example/entities/product/Product.java
--- a/Controller/src/main/java/org/example/entities/product/Product.java	
+++ b/Controller/src/main/java/org/example/entities/product/Product.java	
@@ -1,29 +1,41 @@
 package org.example.entities.product;
 
+import javax.sql.DataSource;
+import java.io.IOException;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
 public class Product {
     private ProductPrice price;
     private String name;
     private String description;
+    private ProductConnector connector;
     private int id;
 
-    private Product() {
-
-    }
-
-    public Product readProductByQuery(String query) {
-        //todo: read product from db;
-
-        price = new ProductPrice(0);
-        name = "";
-        description = "";
-        id = 14;
 
+    public void readProductByQuery(String query) throws SQLException, IOException {
+        connector = new ProductConnector();
+        DataSource ds = connector.dataSource();
 
-        return this;
-    }
-
+        ResultSet result;
+        try (var connection = ds.getConnection()) {
+            var statement = connection.prepareStatement(query);
+            result = statement.executeQuery();
+            if (result == null) {
+                throw new IllegalArgumentException("product does not found");
+            }
+            if (!result.isLast()) {
+                throw new IllegalArgumentException("more than one product by this query");
+            }
 
+            id = result.getInt("id");
+            name = result.getString("name");
+            description = result.getString("description");
+            price = new ProductPrice(result.getInt("price"));
 
-    //todo: think how to use this class if not like a storage of data
+        } catch (SQLException e) {
+            throw new IllegalArgumentException(e);
+        }
 
+    }
 }
Index: Controller/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/build.gradle b/Controller/build.gradle
--- a/Controller/build.gradle	
+++ b/Controller/build.gradle	
@@ -10,8 +10,14 @@
 }
 
 dependencies {
-    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
-    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
+    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
+    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
+    // https://mavenlibs.com/maven/dependency/com.zaxxer/HikariCP
+    implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.0.1'
+    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
+    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.42.0.0'
+    implementation 'mysql:mysql-connector-java:8.0.33'
+
 }
 
 test {
Index: Controller/src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/src/main/java/org/example/Main.java b/Controller/src/main/java/org/example/Main.java
--- a/Controller/src/main/java/org/example/Main.java	
+++ b/Controller/src/main/java/org/example/Main.java	
@@ -1,27 +1,37 @@
 package org.example;
 
-import org.example.entities.product.Users;
+import org.example.entities.product.Product;
+import org.example.entities.user.Users;
 import org.example.validation.Verification;
-import org.example.validation.mail.Mail;
-import org.example.validation.password.Password;
 
+import java.io.IOException;
+import java.sql.SQLException;
 import java.util.Scanner;
 
+import org.example.validation.login.Login;
+
 public class Main {
-    public static void main(String[] args) {
-        Scanner scanner = new Scanner(System.in);
-        Verification verification = new Verification();
-        Users users = new Users();
-        boolean flag = true;
-        while (flag) {
-            try {
-                verification.verifyUser(users, scanner.nextLine(), scanner.nextLine());
-                System.out.println("Success!");
-                flag = false;
-            } catch (Exception e) {
-                System.out.println(e.toString());
-            }
-        }
+    public static void main(String[] args) throws SQLException, IOException {
+
+
+        var product = new Product();
+        product.readProductByQuery("SELECT name FROM Product");
+
+//        Scanner scanner = new Scanner(System.in);
+//        Verification verification = new Verification();
+//        Users users = new Users();
+//        boolean flag = true;
+//        while (flag) {
+//            try {
+//                verification.verifyUser(users, scanner.nextLine(), scanner.nextLine());
+//                System.out.println("Success!");
+//                flag = false;
+//            } catch (Exception e) {
+//                System.out.println(e.toString());
+//            }
+//        }
+
+        //var login = new Login();
 
     }
 }
\ No newline at end of file
Index: .idea/modules/Model.main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/Model.main.iml b/.idea/modules/Model.main.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules/Model.main.iml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="CheckStyle-IDEA-Module" serialisationVersion="2">
+    <option name="activeLocationsIds" />
+  </component>
+</module>
\ No newline at end of file
Index: Controller/src/main/resources/Product.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/src/main/resources/Product.sql b/Controller/src/main/resources/Product.sql
new file mode 100644
--- /dev/null	
+++ b/Controller/src/main/resources/Product.sql	
@@ -0,0 +1,10 @@
+CREATE TABLE IF NOT EXISTS Product
+(
+    id          INT PRIMARY KEY AUTOINCREMENT,
+    name        VARCHAR(256),
+    description VARCHAR(2048),
+    price       FLOAT
+);
+
+INSERT INTO Product(name, description, price)
+VALUES ('potato', 'fresh small washed potato', 0.99);
\ No newline at end of file
Index: .idea/sqldialects.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sqldialects.xml b/.idea/sqldialects.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/sqldialects.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="SqlDialectMappings">
+    <file url="file://$PROJECT_DIR$/Controller/src/main/resources/Product.sql" dialect="SQLite" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,27 +4,36 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e4fd93c1-fb18-4a25-bdea-44fc017ac2e5" name="Changes" comment="feat: add mail validation">
-      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/User.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/Users.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/Verification.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/exceptions/LengthException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/exceptions/NotFoundException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/exceptions/SyntaxException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/exceptions/VerificationException.java" afterDir="false" />
+    <list default="true" id="e4fd93c1-fb18-4a25-bdea-44fc017ac2e5" name="Changes" comment="Skeleton for Product created">
+      <change afterPath="$PROJECT_DIR$/.idea/modules/Model.main.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/sqldialects.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Controller.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/ProductConnector.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Controller/src/main/resources/Product.sql" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Model/src/main/resources/product.sql" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Controller/.gradle/7.4/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/.gradle/7.4/executionHistory/executionHistory.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Controller/.gradle/7.4/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/.gradle/7.4/executionHistory/executionHistory.lock" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Controller/.gradle/7.4/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/.gradle/7.4/fileHashes/fileHashes.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Controller/.gradle/7.4/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/.gradle/7.4/fileHashes/fileHashes.lock" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Controller/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Controller/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Controller/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/.gradle/file-system.probe" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Controller/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/build.gradle" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/login/ValidateLogin.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/login/ValidateLogin.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/mail/Mail.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/mail/Mail.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/mail/ValidateMail.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/mail/ValidateMail.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/passport/ValidatePassport.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/passport/ValidatePassport.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/password/ValidatePassword.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/password/ValidatePassword.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/Product.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/Product.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/user/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/Users.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/entities/user/Users.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/Verification.java" beforeDir="false" afterPath="$PROJECT_DIR$/Controller/src/main/java/org/example/validation/Verification.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/7.4/checksums/checksums.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/7.4/checksums/checksums.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/7.4/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/7.4/executionHistory/executionHistory.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/7.4/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/7.4/executionHistory/executionHistory.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/7.4/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/7.4/fileHashes/fileHashes.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/7.4/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/7.4/fileHashes/fileHashes.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/Model/.gradle/file-system.probe" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Model/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/Model/build.gradle" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -70,11 +79,18 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="master" />
+        <entry key="$PROJECT_DIR$" value="DatabaseConnection" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GithubProjectSettings">
+    <option name="branchProtectionPatterns">
+      <list>
+        <option value="master" />
+      </list>
+    </option>
+  </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
@@ -84,15 +100,39 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;18&quot;
-  }
-}</component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "jdk.selected.JAVA_MODULE": "18",
+    "last_opened_file_path": "C:/Users/plato/IdeaProjects/COOPCourseProject/CRM.db",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.0",
+    "settings.editor.selected.configurable": "preferences.pluginManager"
+  },
+  "keyToStringList": {
+    "DatabaseDriversLRU": [
+      "sqlite",
+      "h2",
+      "sqlserver.localdb",
+      "mysql"
+    ],
+    "RunConfigurationTargetLRU": [
+      "4b9e28e0-f648-4297-94a8-b216c27a6556"
+    ]
+  }
+}]]></component>
+  <component name="RunManager">
+    <configuration name="Product.sql" type="DatabaseScript" editBeforeRun="true" nameIsGenerated="true">
+      <script-file value="$PROJECT_DIR$/Controller/src/main/resources/Product.sql" />
+      <script-mode>FILE</script-mode>
+      <data-source id="4b9e28e0-f648-4297-94a8-b216c27a6556" />
+      <method v="2" />
+    </configuration>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -102,6 +142,14 @@
       <option name="presentableId" value="Default" />
       <updated>1687863934624</updated>
       <workItem from="1687863936148" duration="3616000" />
+      <workItem from="1687873771686" duration="1180000" />
+      <workItem from="1687887888178" duration="1290000" />
+      <workItem from="1688019724546" duration="9000" />
+      <workItem from="1688189198776" duration="3191000" />
+      <workItem from="1688235686005" duration="115000" />
+      <workItem from="1688278402535" duration="6795000" />
+      <workItem from="1688457163253" duration="3117000" />
+      <workItem from="1688460402732" duration="1439000" />
     </task>
     <task id="LOCAL-00001" summary="Modules for MVC created">
       <created>1687864354910</created>
@@ -142,7 +190,19 @@
       <map>
         <entry key="MAIN">
           <value>
-            <State />
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="master" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
           </value>
         </entry>
         <entry key="b1356f87-6e22-4644-a3fe-d0cec856c414">
@@ -192,8 +252,18 @@
           <url>file://$PROJECT_DIR$/Controller/src/main/java/org/example/validation/processor/RFactory.java</url>
           <line>9</line>
           <option name="timeStamp" value="2" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/Controller/src/main/java/org/example/entities/product/ProductConnector.java</url>
+          <line>19</line>
+          <option name="timeStamp" value="11" />
         </line-breakpoint>
       </breakpoints>
     </breakpoint-manager>
+    <watches-manager>
+      <configuration name="GradleRunConfiguration">
+        <watch expression="query" />
+      </configuration>
+    </watches-manager>
   </component>
 </project>
\ No newline at end of file
Index: Controller/src/main/java/org/example/entities/product/ProductConnector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/src/main/java/org/example/entities/product/ProductConnector.java b/Controller/src/main/java/org/example/entities/product/ProductConnector.java
new file mode 100644
--- /dev/null	
+++ b/Controller/src/main/java/org/example/entities/product/ProductConnector.java	
@@ -0,0 +1,43 @@
+package org.example.entities.product;
+
+import com.zaxxer.hikari.HikariConfig;
+import com.zaxxer.hikari.HikariDataSource;
+
+import javax.sql.DataSource;
+import java.io.*;
+import java.sql.SQLException;
+import java.util.Objects;
+
+class ProductConnector {
+    private DataSource ds;
+
+    DataSource dataSource() throws SQLException, IOException {
+        if (this.ds == null) {
+            var config = new HikariConfig();
+            config.setJdbcUrl("jdbc:mysql://localhost:3306/CRM");
+            config.setPassword("root");
+            config.setUsername("root");
+            this.ds = new HikariDataSource(config);
+        }
+
+
+
+       String query = "CREATE TABLE IF NOT EXISTS Product\n" +
+               "(\n" +
+               "    id          INT PRIMARY KEY AUTO_INCREMENT,\n" +
+               "    name        VARCHAR(256),\n" +
+               "    description VARCHAR(2048),\n" +
+               "    price       FLOAT\n" +
+               ");\n" +
+               "\n" +
+               "INSERT INTO Product(name, description, price)\n" +
+               "VALUES ('potato', 'fresh small washed potato', 0.99);";
+        var connection = ds.getConnection();
+
+        var statement = connection.prepareStatement(query);
+        statement.execute();
+        connection.close();
+        return ds;
+    }
+
+}
Index: Model/src/main/resources/product.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Model/src/main/resources/product.sql b/Model/src/main/resources/product.sql
new file mode 100644
--- /dev/null	
+++ b/Model/src/main/resources/product.sql	
@@ -0,0 +1,10 @@
+CREATE TABLE IF NOT EXISTS product
+(
+    id          INT PRIMARY KEY,
+    name        TEXT,
+    description TEXT,
+    price       REAL
+);
+
+insert into product (id, name, description, price)
+values (0, 'Carrot', 'fresh carrot', 0.2);
\ No newline at end of file
Index: Controller.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller.iml b/Controller.iml
new file mode 100644
--- /dev/null	
+++ b/Controller.iml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="CheckStyle-IDEA-Module" serialisationVersion="2">
+    <option name="activeLocationsIds" />
+  </component>
+</module>
\ No newline at end of file
Index: Model/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Model/build.gradle b/Model/build.gradle
--- a/Model/build.gradle	
+++ b/Model/build.gradle	
@@ -10,8 +10,8 @@
 }
 
 dependencies {
-    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
-    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
+    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
+    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
 }
 
 test {
